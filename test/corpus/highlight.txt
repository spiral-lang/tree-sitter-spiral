====================================================
highlight Not Errors
====================================================

(sdasd(): sdsds()-> 3 );

3(4+85);
x > 5 then 8 | x<4 then 9 | 3;
(sdasd():5=4);
fn abc(u64, b32): fn() -> fn() -> 5 | 8 {

};

for x of Some(x, y)  {
  x;
   <element>
   	<ul>
    <li s=125>sasasasdasdasd</li>
    </ul>
   </element>;
}

match x of x:Some(x, y) of ss {
  x,
   <element>
   	<ul>
    <li s=125>sasasasdasdasd</li>
    </ul>
   </element>,
}


while y.k.p {
  x;
   <element>
   	<ul>
    <li s=125>sasasasdasdasd</li>
    </ul>
   </element>;
}

if x is c {
 x;
}


fn(){} | { 3 + 5 };
//      ^ keyword.operator
5...5 + 5;
//  ^ natural_number

-5...5 + 5;
//     ^ operator

//curry
const x = (x)=>(y)=>(z)=>(w)=> x + y + z + w;
//    ^ local.definition
//or is not, == -> in == &&


x = while true { return 5; {7, 5}}
//    ^ keyword

5 + {} -3 | {-, ==, +, on};
!3;
3 | {};
3;
3 == 5;
x and d or 5;

!!dd{let dd, ff};
{x=30};
!_.c;
{x:154}
{x}
{c, c, m.k.j};
5;
(k: (+, _.root, !_.children), node:Node);

(path: (_.root, _.children*), node:Node);

3;
4545;
0b101011;
//  ^ natural_number

0xAe;
0o44;
454.545'e+5451;
454'e+5451;
//  ^ number_suffix

{k, y, c}
//functor without argument
mod 'self::asd{}
//  ^ symbol

'self:asd @  mod 'self::asd{}
//     ^ local.definition
//           ^ hof

mod 'self::asd{x=30}
mod 'self::asd(){x= 30;}
let ::x = 50;
const ::x = 50;
{let @'self::asa asa: 30}
{let @'self:asa asa: 30}
{let @asa asa: 30}
cas(x, y);

x = 30;
x = rb'{}`sasdasd  {#sds  lkl + kl*20}`;
x = rb'()`sasdasd  (#sds  lkl + kl*2)`;
x = rb'«»`sasdasd  «#sds  lkl + kl*20»`;
x = rb'‹›`sasdasd  ‹#sds  lkl + kl*20›`;
x = r`sasdasd  sasdasdsasdasdsasdasdsasdasdsasdasd`;
x = rb`sasdasd  sasdasdsasdasdsasdasdsasdasdsasdasd`;
x = `sadasdaassssssssssssssssdasd`;
#sadasd;

errmnmnmn::graph;

#delegate yield #fre 30;
//^ decorator

#delegate return #fre 30;




for (path: (_.root, _.children*)*?, node:Node) of x {4;5 }

for x of y {x}

for x of (x, x) {
	d;
}
for x of s(x, x) {
	d;
}
for x of ({x, x}=>y) {
	d;
}
x -> y;

x += 1;
y = (5389878.45431'Gigabytes/s^2);

//named functo
//named functor
//^ comment
functor graph(){
	'self;
	return graph(x):u32{x};
}

match try(ssd(45)) {
}
x on Changes(_.color: `blue`, _.color: `green`) becomes Rat(size:35meters);
x on {
}
sd()-> u32{};
graph(x)=>u32;
[x]=>u32;
{x}=>u32;
x=>u32;
//^ delimiter.special

x=> x >  10 then 50
	   | x > 5 then 30
       | 59;

aasdas is not 4 | sdasds is 25;
sads -> sdasd  == sdasd -> asdasd;
mm -> as | y -> dasd;
mm == as | y != dasd & y > 5;
3 + 5 | 4 + 8 | 5 * 5;
3 & 5 | 4 & 8 | 5 & 5;
3 ∘ 5 | 4 ∘ 8 | 5 & 5 ∘ 6;
//^ keyword.operator

3 and 5 | 4 and 8 | 5 and 5;
3 or 5 | 4 or 8 | 5 or 5 & 30;
3 + 5 & 4 * 8 | 4 or 8 | 5 & 45 or 5 + 32?;
!5 | !N;
5 | 32?;
5 | !N;
5 + 32?;
!5 + 32?;
!5 + 32?;
!5 + !N;
!!!!5 + !N???;


let x = some::sadasd::asd;
let wqqwewewq = sad;
let w = lasas.(-> | is | + );
let y = 90.ll;


use sdasd::asdsa::{dsa, 'sad};
//^ keyword

#_ use tree;
#!ambient? #sadasdasd? use sdasd::asdsa::{dsa, 'sad}
#!ambient use sdasd()::{dsa, 'sad};
#!ambient #ambient use sdasd::asdsa::{dsa, 'sad};
#!ambient use sdasd::asdsa::{dsa, 'sad};
#(ambient | rule) #(sdsd asdas{ddfddf{};})? #dasdasd{} use sdasd::asdsa::{dsa, 'sad};
#!ambien? use sdasd::asdsa::{dsa, 'sad};
#!dfsdf #ambient? use sdasd::asdsa::{dsa, 'sad};


x;

<-->
# abcd
dasdasdasd
asdasd

```sp


```
</-->
//^ document


<element>
	<ul>
   <li s=125>sasasasdasdasd</li>
   </ul>
</element>


//named functor
functor graph(){
//^ hof

	'self;
	return graph(x):u32{x};
}

//named functor
functor graph(){
//^ hof

	'self;
	graph(x)->u32(x);
}


//without name
fn (){
	let y = 5;
}

let x:String = String{`adasdasd`} + string();
let x = theory;
let x:mod = mod{};
let x = graph;
mod::asdas::some;
mod::asdas;
some::asdasd;
none;
sads::none;

#hff aaa::export 'self::sdasd (){
	5;
    4;
    50
}
#dasd fn 'self::asas (){


}

#!asdasd?
#theory mod  'self::asas{


}



{
  let @ name = `John`,
  age=30,
  cars= {
  //^ key

    car1: `Ford`,
    car2: `BMW`,
    car3: `Fiat`,
    fn: 30,

  }
};

<asa k=30/>
//   ^ key


{
    `_id`: `5e1b453aef5a8175d3d8c61e`,
//          ^ string

    `index`: 4,
//    ^ string

    `guid`: `98f1bd0f-bab3-4aec-bb66-51ed273c2a00`,
    `isActive`: true,
    `balance`: 1_578.25$,
    `picture`: `http://placehold.it/32x32`,
    `age`: 37,
    `eyeColor`: `blue`,
    `name`: `Lindsey Alford`,
    `gender`: `male`,
    `company`: `HOTCAKES`,
    `email`: `lindseyalford@hotcakes.com`,
    `phone`: `+1 (983) 544-3583`,
    `address`: `347 Fiske Place, Ada, Oklahoma, 4748`,
    `about`: `Tempor {yy + qui + 5.354 * 6 == 33} velit incididunt do occaecat sint quis fugiat. Qui ex fugiat amet qui eu culpa pariatur reprehenderit cupidatat cupidatat est eiusmod esse. Sunt officia cillum Lorem minim irure. Enim aute anim enim sit. Ad elit est ad id velit eu proident. Cillum occaecat ea nisi eiusmod ad.\r\n`,
    `registered`: `2016-02-13T01:37:30 +05:00`,
    `latitude`: 67.314338,
    `longitude`: 118.98787,
    `tags`: [
      `in`,
      `dolor`,
      `proident`,
      `sint`,
      `est`,
      `sit`,
      `dolor`
    ],
    `friends`: [
      {
        `id`: 0,
        `name`: `Tonia Brennan`
      },
      {
        `id`: 1,
        `name`: `Jennifer Gibson`
      },
      {
        `id`: 2,
        `name`: `Berger Gonzales`
      }
    ],
    `lklk`.sdasd::sdasd  = 40,
    `greeting`: `Hello, Lindsey Alford! You have 8 unread messages.`,
    `favoriteFruit`: `banana`
 };

{ let@ jj asdas: 30,
field{y=50},
field{y=50},
field{y=50},
field{y=50},
field{string=50},
}
let y = str;
//sadasddfsdfd sadasd

/*
asdasdasdasds
   */
//^ comment


let x = `asd\u{454}dasd {ds = s + 5}`;
let hjhkhjhdf_adasdasdjx = '\u{125}';
let y = 'ss * 5 == 5;

if C == #nat number + () +5 {
	x;
}

while C == #nat number and y == Some(x) {
	x;
}

for x of  C == #nat number + sd(x, y) + 5 {
	x;
}



struct Action
//^ hof
{
  x: int,
  y: T
}


for (@index: number, @path: (_.root, _.children*), @node:Node) of graph.bfs.enumerate {
//     ^ key



}

let x = num;
num::ss;
g.+(50);
num + num;
num + {};
num | num;
num == num;
num == {};
num | {};
num | +;
if num == 5 {
}
if num | 5 {
}
if 5 | num {
}
if 5 == num {
}
if num + num {
}

graph sdas{
	Edge{},
};

graph sdas (){
	Edge{};
};

graph()->5;
a.d;
a => c;
(3 | ==, +);
!graph;
graph?;
return graph;
x > 5;
z < 65;
//^ keyword.operator
  <el />
//^ delimiter

g.+(50);
//^ operator
5btc + 3$;
//      ^ currency


<example></example>;
<example x=35 y=`sad`></example>;
<alert>hola mundo</alert>;
<form toltip={<div/>}></form>;
<form ...x></form>;
<form ...x:50></form>;
<form ...x:50=50></form>;
<form ...x:{3}={10x}></form>;
<form ...x:{3}={10x}>{d.c(0)}</form>;
<ul>
    <li>Apples</li>
    <li>Bananas</li>
    <li>Cherries</li>
    b`sadsad`
    {5}
</ul>;


//object declaration with generics
aas sdasd  {
	x: 5,
    y: 6= 6
}


//functor declaration with generics
aas sdasd ()  {
	5;
    6;
}


sdasd() -> sdasd() -> 5 + 5;
//functor signarute
(sdasd():5);
#delegate yield -3 + 5 * 68;
sdasd() {};
sdasd() -> 5+954+31;
(sdasd()-> c == 5);
(sdasd()-> 5);
(sdasd(){});
(s.sdasd(): 5 ={});
5 + 5;



---
(source_file (bracket_object (key_tty_value (object_key (call (ident) (bracket_object))) (algebra_operation (binary_operation (call (ident) (bracket_object)) (natural_number (arabic_natural_number)))))) (product_expression (natural_number (arabic_natural_number)) (bracket_object (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (binary_operation (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))) (algebra_operation (binary_operation (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))))) (natural_number (arabic_natural_number)))) (bracket_object (key_tty_value (object_key (call (ident) (bracket_object))) (natural_number (arabic_natural_number)) (assign) (natural_number (arabic_natural_number)))) (expression_block (functor_literal_expression (ident) (ident) (bracket_object (ident) (ident)) (algebra_operation (binary_operation (call (ident) (bracket_object)) (algebra_operation (binary_operation (call (ident) (bracket_object)) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))))) (statements_block))) (empty_statement) (expression_block (for_expression (of_pattern (type_annotation (ident)) (call (ident) (bracket_object (ident) (ident)))) (statements_block (ident) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement)))) (expression_block (match_expression (of_pattern (type_annotation (ident)) (of_pattern (type_annotation (ident) (call (ident) (bracket_object (ident) (ident)))) (ident))) (braces_object (ident) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident))))))))) (expression_block (while_expression (dot_expression (dot_expression (ident) (ident)) (ident)) (statements_block (ident) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement)))) (expression_block (if_expression (algebra_operation (binary_operation (ident) (ident))) (statements_block (ident)))) (algebra_operation (functor_binary_operation (functor_literal_expression (ident) (bracket_object) (statements_block)) (braces_object (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number)))))) (line_comment) (ambiguous_algebra_operation (range_expression (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (line_comment) (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_operator) (range_expression (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (ambiguous_operator) (natural_number (arabic_natural_number))) (line_comment) (line_comment) (variable_declaration (exportable_type_annotation (ident)) (assign) (lambda_literal_expression (bracket_object (ident)) (arrow) (lambda_literal_expression (bracket_object (ident)) (arrow) (lambda_literal_expression (bracket_object (ident)) (arrow) (lambda_literal_expression (bracket_object (ident)) (arrow) (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ident) (ambiguous_operator) (ident)) (ambiguous_operator) (ident)) (ambiguous_operator) (ident))))))) (line_comment) (line_comment) (assignment_statement (ident) (assign) (while_expression (boolean_literal) (statements_block (return_expression (natural_number (arabic_natural_number))) (expression_block (braces_object (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number))))))) (line_comment) (algebra_operation (functor_binary_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (braces_object)) (ambiguous_operator) (natural_number (arabic_natural_number))) (braces_object (all_operators_preprocessor) (all_operators_preprocessor) (all_operators_preprocessor) (all_operators_preprocessor)))) (unary_operation_prefix (unary_symbol_prefix) (natural_number (arabic_natural_number))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (braces_object))) (natural_number (arabic_natural_number)) (algebra_operation (binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (ident) (ident))) (natural_number (arabic_natural_number)))) (unary_operation_prefix (unary_symbol_prefix) (unary_operation_prefix (unary_symbol_prefix) (build (ident) (braces_object (key_tty_value (binding) (object_key (ident))) (ident))))) (expression_block (braces_object (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))))) (empty_statement) (unary_operation_prefix (unary_symbol_prefix) (dot_expression (ident) (ident))) (expression_block (braces_object (key_tty_value (object_key (ident)) (natural_number (arabic_natural_number))))) (expression_block (braces_object (ident))) (expression_block (braces_object (ident) (ident) (dot_expression (dot_expression (ident) (ident)) (ident)))) (empty_statement) (natural_number (arabic_natural_number)) (bracket_object (key_tty_value (object_key (ident)) (bracket_object (all_operators_preprocessor) (dot_expression (ident) (ident)) (unary_operation_prefix (unary_symbol_prefix) (dot_expression (ident) (ident))))) (key_tty_value (object_key (ident)) (ident))) (bracket_object (key_tty_value (object_key (ident)) (bracket_object (dot_expression (ident) (ident)) (ambiguous_algebra_operation (dot_expression (ident) (ident)) (ambiguous_operator)))) (key_tty_value (object_key (ident)) (ident))) (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)) (natural_number (binary_natural_number)) (line_comment) (natural_number (hexadecimal_natural_number)) (natural_number (octal_natural_number)) (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number) (fractional_unit_suffix (exponent (arabic_natural_number))))) (decimal_literal (natural_fraction_literal (arabic_natural_number) (fractional_unit_suffix (exponent (arabic_natural_number))))) (line_comment) (expression_block (braces_object (ident) (ident) (ident))) (line_comment) (expression_block (object_declaration (ident) (only_export_label (symbol) (ident)) (braces_object))) (line_comment) (expression_block (label (symbol) (ident)) (object_declaration (ident) (only_export_label (symbol) (ident)) (braces_object))) (line_comment) (line_comment) (expression_block (object_declaration (ident) (only_export_label (symbol) (ident)) (braces_object (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number)))))) (expression_block (functor_literal_expression (ident) (only_export_label (symbol) (ident)) (bracket_object) (statements_block (assignment_statement (ident) (assign) (natural_number (arabic_natural_number)))))) (variable_declaration (exportable_type_annotation (ident)) (assign) (natural_number (arabic_natural_number))) (variable_declaration (exportable_type_annotation (ident)) (assign) (natural_number (arabic_natural_number))) (expression_block (braces_object (key_tty_value (binding (label (symbol) (ident))) (object_key (ident)) (natural_number (arabic_natural_number))))) (expression_block (braces_object (key_tty_value (binding (label (symbol) (ident))) (object_key (ident)) (natural_number (arabic_natural_number))))) (expression_block (braces_object (key_tty_value (binding (ident)) (object_key (ident)) (natural_number (arabic_natural_number))))) (call (ident) (bracket_object (ident) (ident))) (assignment_statement (ident) (assign) (natural_number (arabic_natural_number))) (assignment_statement (ident) (assign) (string_literal (raw_string_literal (string_start) (internal_string_content) (raw_template_substitution) (raw_template_substitution (ambiguous_algebra_operation (ambiguous_algebra_operation (hash_tag_expression (decorator (ident)) (ident)) (ambiguous_operator) (ident)) (ambiguous_operator) (natural_number (arabic_natural_number)))) (raw_template_substitution)))) (assignment_statement (ident) (assign) (string_literal (raw_string_literal (string_start) (internal_string_content) (raw_template_substitution) (raw_template_substitution (ambiguous_algebra_operation (ambiguous_algebra_operation (hash_tag_expression (decorator (ident)) (ident)) (ambiguous_operator) (ident)) (ambiguous_operator) (natural_number (arabic_natural_number)))) (raw_template_substitution)))) (assignment_statement (ident) (assign) (string_literal (raw_string_literal (string_start) (internal_string_content) (raw_template_substitution) (raw_template_substitution (ambiguous_algebra_operation (ambiguous_algebra_operation (hash_tag_expression (decorator (ident)) (ident)) (ambiguous_operator) (ident)) (ambiguous_operator) (natural_number (arabic_natural_number)))) (raw_template_substitution)))) (assignment_statement (ident) (assign) (string_literal (raw_string_literal (string_start) (internal_string_content) (raw_template_substitution) (raw_template_substitution (ambiguous_algebra_operation (ambiguous_algebra_operation (hash_tag_expression (decorator (ident)) (ident)) (ambiguous_operator) (ident)) (ambiguous_operator) (natural_number (arabic_natural_number)))) (raw_template_substitution)))) (assignment_statement (ident) (assign) (string_literal (raw_string_literal (string_start) (internal_string_content)))) (assignment_statement (ident) (assign) (string_literal (raw_string_literal (string_start) (internal_string_content)))) (assignment_statement (ident) (assign) (string_literal (escaped_string_literal (string_start) (string_content)))) (hash_tag_expression (decorator (ident))) (simple_path (ident) (ident)) (hash_tag_expression (decorator (ident)) (yield_expression (hash_tag_expression (decorator (ident)) (natural_number (arabic_natural_number))))) (line_comment) (hash_tag_expression (decorator (ident)) (return_expression (hash_tag_expression (decorator (ident)) (natural_number (arabic_natural_number))))) (expression_block (for_expression (of_pattern (object_pattern (bracket_object (key_tty_value (object_key (ident)) (unary_operation_postfix (ambiguous_algebra_operation (bracket_object (dot_expression (ident) (ident)) (ambiguous_algebra_operation (dot_expression (ident) (ident)) (ambiguous_operator))) (ambiguous_operator)) (unary_symbol_postfix))) (key_tty_value (object_key (ident)) (ident)))) (ident)) (statements_block (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number))))) (expression_block (for_expression (of_pattern (type_annotation (ident)) (ident)) (statements_block (ident)))) (expression_block (for_expression (of_pattern (type_annotation (ident)) (bracket_object (ident) (ident))) (statements_block (ident)))) (expression_block (for_expression (of_pattern (type_annotation (ident)) (call (ident) (bracket_object (ident) (ident)))) (statements_block (ident)))) (expression_block (for_expression (of_pattern (type_annotation (ident)) (bracket_object (lambda_literal_expression (braces_object (ident) (ident)) (arrow) (ident)))) (statements_block (ident)))) (algebra_operation (binary_operation (ident) (ident))) (compound_assigment (ident) (compound_assigment_operator) (natural_number (arabic_natural_number))) (assignment_statement (ident) (assign) (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (product_expression (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number) (natural_unit_suffix))) (ident)) (ambiguous_operator) (ident)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (line_comment) (line_comment) (line_comment) (expression_block (functor_literal_expression (ident) (ident) (bracket_object) (statements_block (symbol) (return_expression (functor_literal_expression (ident) (bracket_object (ident)) (ident) (statements_block (ident))))))) (expression_block (match_expression (try_call (bracket_object (call (ident) (bracket_object (natural_number (arabic_natural_number)))))) (braces_object))) (algebra_operation (binary_operation (algebra_operation (binary_operation (ident) (call (ident) (bracket_object (key_tty_value (object_key (dot_expression (ident) (ident))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (dot_expression (ident) (ident))) (string_literal (escaped_string_literal (string_start) (string_content)))))))) (call (ident) (bracket_object (key_tty_value (object_key (ident)) (product_expression (natural_number (arabic_natural_number)) (ident))))))) (expression_block (on_statement (ident) (braces_object))) (algebra_operation (binary_operation (call (ident) (bracket_object)) (build (ident) (braces_object)))) (lambda_literal_expression (ident) (bracket_object (ident)) (arrow) (ident)) (lambda_literal_expression (square_object (ident)) (arrow) (ident)) (lambda_literal_expression (braces_object (ident)) (arrow) (ident)) (lambda_literal_expression (ident) (arrow) (ident)) (line_comment) (lambda_literal_expression (ident) (arrow) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (binary_operation (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))) (algebra_operation (binary_operation (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))))) (natural_number (arabic_natural_number))))) (algebra_operation (functor_binary_operation (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))))) (algebra_operation (binary_operation (ident) (algebra_operation (binary_operation (algebra_operation (binary_operation (ident) (ident))) (ident))))) (algebra_operation (binary_operation (ident) (algebra_operation (binary_operation (algebra_operation (functor_binary_operation (ident) (ident))) (ident))))) (algebra_operation (functor_binary_operation (algebra_operation (binary_operation (ident) (ident))) (algebra_operation (functor_binary_operation (algebra_operation (binary_operation (ident) (ident))) (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))))))) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))))) (line_comment) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (natural_number (arabic_natural_number)))) (natural_number (arabic_natural_number)))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (unary_operation_postfix (natural_number (arabic_natural_number)) (unary_symbol_postfix))))) (algebra_operation (functor_binary_operation (unary_operation_prefix (unary_symbol_prefix) (natural_number (arabic_natural_number))) (unary_operation_prefix (unary_symbol_prefix) (ident)))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (unary_operation_postfix (natural_number (arabic_natural_number)) (unary_symbol_postfix)))) (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (unary_operation_prefix (unary_symbol_prefix) (ident)))) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (unary_operation_postfix (natural_number (arabic_natural_number)) (unary_symbol_postfix))) (ambiguous_algebra_operation (unary_operation_prefix (unary_symbol_prefix) (natural_number (arabic_natural_number))) (ambiguous_operator) (unary_operation_postfix (natural_number (arabic_natural_number)) (unary_symbol_postfix))) (ambiguous_algebra_operation (unary_operation_prefix (unary_symbol_prefix) (natural_number (arabic_natural_number))) (ambiguous_operator) (unary_operation_postfix (natural_number (arabic_natural_number)) (unary_symbol_postfix))) (ambiguous_algebra_operation (unary_operation_prefix (unary_symbol_prefix) (natural_number (arabic_natural_number))) (ambiguous_operator) (unary_operation_prefix (unary_symbol_prefix) (ident))) (ambiguous_algebra_operation (unary_operation_prefix (unary_symbol_prefix) (unary_operation_prefix (unary_symbol_prefix) (unary_operation_prefix (unary_symbol_prefix) (unary_operation_prefix (unary_symbol_prefix) (natural_number (arabic_natural_number)))))) (ambiguous_operator) (unary_operation_prefix (unary_symbol_prefix) (unary_operation_postfix (unary_operation_postfix (unary_operation_postfix (ident) (unary_symbol_postfix)) (unary_symbol_postfix)) (unary_symbol_postfix)))) (variable_declaration (exportable_type_annotation (ident)) (assign) (simple_path (simple_path (ident) (ident)) (ident))) (variable_declaration (exportable_type_annotation (ident)) (assign) (ident)) (variable_declaration (exportable_type_annotation (ident)) (assign) (dot_expression (ident) (bracket_object (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (operator_as_expression) (operator_as_expression))) (operator_as_expression)))))) (variable_declaration (exportable_type_annotation (ident)) (assign) (dot_expression (natural_number (arabic_natural_number)) (ident))) (expression_block (use_expression_block (simple_path (ident) (ident)) (use_tree (ident)) (use_tree (symbol)))) (empty_statement) (line_comment) (hash_tag_expression (decorator (ident)) (use_expression (use_tree (ident)))) (expression_block (hash_tag_ending_with_block (decorator (unary_symbol_prefix) (ident) (unary_symbol_postfix)) (hash_tag_ending_with_block (decorator (ident) (unary_symbol_postfix)) (use_expression_block (simple_path (ident) (ident)) (use_tree (ident)) (use_tree (symbol)))))) (expression_block (hash_tag_ending_with_block (decorator (unary_symbol_prefix) (ident)) (use_expression_block (call (ident) (bracket_object)) (use_tree (ident)) (use_tree (symbol))))) (empty_statement) (expression_block (hash_tag_ending_with_block (decorator (unary_symbol_prefix) (ident)) (hash_tag_ending_with_block (decorator (ident)) (use_expression_block (simple_path (ident) (ident)) (use_tree (ident)) (use_tree (symbol)))))) (empty_statement) (expression_block (hash_tag_ending_with_block (decorator (unary_symbol_prefix) (ident)) (use_expression_block (simple_path (ident) (ident)) (use_tree (ident)) (use_tree (symbol))))) (empty_statement) (expression_block (hash_tag_ending_with_block (decorator (bracket_object (algebra_operation (functor_binary_operation (ident) (ident))))) (hash_tag_ending_with_block (decorator (bracket_object (functor_without_arguments (ident) (ident) (statements_block (build (ident) (braces_object))))) (unary_symbol_postfix)) (hash_tag_ending_with_block (decorator (ident)) (braces_object))))) (expression_block (use_expression_block (simple_path (ident) (ident)) (use_tree (ident)) (use_tree (symbol)))) (empty_statement) (expression_block (hash_tag_ending_with_block (decorator (unary_symbol_prefix) (ident) (unary_symbol_postfix)) (use_expression_block (simple_path (ident) (ident)) (use_tree (ident)) (use_tree (symbol))))) (empty_statement) (expression_block (hash_tag_ending_with_block (decorator (unary_symbol_prefix) (ident)) (hash_tag_ending_with_block (decorator (ident) (unary_symbol_postfix)) (use_expression_block (simple_path (ident) (ident)) (use_tree (ident)) (use_tree (symbol)))))) (empty_statement) (ident) (document (doc_fragment (spx_text))) (line_comment) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident))))))) (line_comment) (expression_block (functor_literal_expression (ident) (ident) (bracket_object) (statements_block (line_comment) (symbol) (return_expression (functor_literal_expression (ident) (bracket_object (ident)) (ident) (statements_block (ident))))))) (line_comment) (expression_block (functor_literal_expression (ident) (ident) (bracket_object) (statements_block (line_comment) (symbol) (algebra_operation (binary_operation (call (ident) (bracket_object (ident))) (call (ident) (bracket_object (ident)))))))) (line_comment) (expression_block (functor_literal_expression (ident) (bracket_object) (statements_block (variable_declaration (exportable_type_annotation (ident)) (assign) (natural_number (arabic_natural_number)))))) (variable_declaration (exportable_type_annotation (ident) (ident)) (assign) (build (ident) (braces_object (string_literal (escaped_string_literal (string_start) (string_content)))))) (ambiguous_algebra_operation (ambiguous_operator) (call (ident) (bracket_object))) (variable_declaration (exportable_type_annotation (ident)) (assign) (ident)) (variable_declaration (exportable_type_annotation (ident) (ident)) (assign) (build (ident) (braces_object))) (empty_statement) (variable_declaration (exportable_type_annotation (ident)) (assign) (ident)) (simple_path (simple_path (ident) (ident)) (ident)) (simple_path (ident) (ident)) (simple_path (ident) (ident)) (ident) (simple_path (ident) (ident)) (expression_block (hash_tag_ending_with_block (decorator (ident)) (functor_literal_expression (simple_path (ident) (ident)) (only_export_label (symbol) (ident)) (bracket_object) (statements_block (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))) (expression_block (hash_tag_ending_with_block (decorator (ident)) (functor_literal_expression (ident) (only_export_label (symbol) (ident)) (bracket_object) (statements_block)))) (expression_block (hash_tag_ending_with_block (decorator (unary_symbol_prefix) (ident) (unary_symbol_postfix)) (hash_tag_ending_with_block (decorator (ident)) (object_declaration (ident) (only_export_label (symbol) (ident)) (braces_object))))) (expression_block (braces_object (key_tty_value (binding) (object_key (ident)) (assign) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))) (key_tty_value (object_key (ident)) (assign) (braces_object (line_comment) (key_tty_value (object_key (ident)) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (ident)) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (ident)) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (ident)) (natural_number (arabic_natural_number))))))) (empty_statement) (expression_block (spx_expression (spx_self_closing_element (spx_element_name (object_key (ident))) (spx_key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number)))))) (line_comment) (expression_block (braces_object (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (line_comment) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (natural_number (arabic_natural_number))) (line_comment) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (boolean_literal)) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (product_expression (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number))) (ident (currency)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (natural_number (arabic_natural_number))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content) (template_substitution (algebra_operation (binary_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ident) (ambiguous_operator) (ident)) (ambiguous_operator) (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number)))) (ambiguous_operator) (natural_number (arabic_natural_number))) (natural_number (arabic_natural_number))))) (string_content) (escape_sequence) (escape_sequence)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (square_object (string_literal (escaped_string_literal (string_start) (string_content))) (string_literal (escaped_string_literal (string_start) (string_content))) (string_literal (escaped_string_literal (string_start) (string_content))) (string_literal (escaped_string_literal (string_start) (string_content))) (string_literal (escaped_string_literal (string_start) (string_content))) (string_literal (escaped_string_literal (string_start) (string_content))) (string_literal (escaped_string_literal (string_start) (string_content))))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (square_object (braces_object (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (natural_number (arabic_natural_number))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content))))) (braces_object (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (natural_number (arabic_natural_number))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content))))) (braces_object (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (natural_number (arabic_natural_number))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content))))))) (key_tty_value (object_key (dot_expression (string_literal (escaped_string_literal (string_start) (string_content))) (simple_path (ident) (ident)))) (assign) (natural_number (arabic_natural_number))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))) (key_tty_value (object_key (string_literal (escaped_string_literal (string_start) (string_content)))) (string_literal (escaped_string_literal (string_start) (string_content)))))) (empty_statement) (expression_block (braces_object (key_tty_value (binding (ident)) (object_key (ident)) (natural_number (arabic_natural_number))) (build (ident) (braces_object (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))))) (build (ident) (braces_object (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))))) (build (ident) (braces_object (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))))) (build (ident) (braces_object (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))))) (build (ident) (braces_object (key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))))))) (variable_declaration (exportable_type_annotation (ident)) (assign) (ident)) (line_comment) (block_comment) (line_comment) (variable_declaration (exportable_type_annotation (ident)) (assign) (string_literal (escaped_string_literal (string_start) (string_content) (escape_sequence) (string_content) (template_substitution (key_tty_value (object_key (ident)) (assign) (ambiguous_algebra_operation (ident) (ambiguous_operator) (natural_number (arabic_natural_number)))))))) (variable_declaration (exportable_type_annotation (ident)) (assign) (char_literal)) (variable_declaration (exportable_type_annotation (ident)) (assign) (algebra_operation (binary_operation (ambiguous_algebra_operation (symbol) (ambiguous_operator) (natural_number (arabic_natural_number))) (natural_number (arabic_natural_number))))) (expression_block (if_expression (algebra_operation (binary_operation (ident) (ambiguous_algebra_operation (ambiguous_algebra_operation (hash_tag_expression (decorator (ident)) (ident)) (ambiguous_operator) (bracket_object)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (statements_block (ident)))) (expression_block (while_expression (algebra_operation (functor_binary_operation (algebra_operation (binary_operation (ident) (hash_tag_expression (decorator (ident)) (ident)))) (algebra_operation (binary_operation (ident) (call (ident) (bracket_object (ident))))))) (statements_block (ident)))) (expression_block (for_expression (of_pattern (type_annotation (ident)) (algebra_operation (binary_operation (ident) (ambiguous_algebra_operation (ambiguous_algebra_operation (hash_tag_expression (decorator (ident)) (ident)) (ambiguous_operator) (call (ident) (bracket_object (ident) (ident)))) (ambiguous_operator) (natural_number (arabic_natural_number)))))) (statements_block (ident)))) (expression_block (object_declaration (ident) (ident) (line_comment) (braces_object (key_tty_value (object_key (ident)) (ident)) (key_tty_value (object_key (ident)) (ident))))) (expression_block (for_expression (of_pattern (object_pattern (bracket_object (key_tty_value (binding) (object_key (ident)) (ident)) (key_tty_value (binding) (object_key (ident)) (bracket_object (dot_expression (ident) (ident)) (ambiguous_algebra_operation (dot_expression (ident) (ident)) (ambiguous_operator)))) (key_tty_value (binding) (object_key (ident)) (ident)))) (dot_expression (dot_expression (ident) (ident)) (ident))) (statements_block (line_comment)))) (variable_declaration (exportable_type_annotation (ident)) (assign) (ident)) (simple_path (ident) (ident)) (call (dot_expression (ident) (all_operators_preprocessor)) (bracket_object (natural_number (arabic_natural_number)))) (ambiguous_algebra_operation (ident) (ambiguous_operator) (ident)) (ambiguous_algebra_operation (ident) (ambiguous_operator) (braces_object)) (algebra_operation (functor_binary_operation (ident) (ident))) (algebra_operation (binary_operation (ident) (ident))) (algebra_operation (binary_operation (ident) (braces_object))) (algebra_operation (functor_binary_operation (ident) (braces_object))) (algebra_operation (functor_binary_operation (ident) (operator_as_expression))) (expression_block (if_expression (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (statements_block))) (expression_block (if_expression (algebra_operation (functor_binary_operation (ident) (natural_number (arabic_natural_number)))) (statements_block))) (expression_block (if_expression (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (ident))) (statements_block))) (expression_block (if_expression (algebra_operation (binary_operation (natural_number (arabic_natural_number)) (ident))) (statements_block))) (expression_block (if_expression (ambiguous_algebra_operation (ident) (ambiguous_operator) (ident)) (statements_block))) (expression_block (object_declaration (ident) (ident) (braces_object (build (ident) (braces_object))))) (empty_statement) (expression_block (functor_literal_expression (ident) (ident) (bracket_object) (statements_block (build (ident) (braces_object))))) (empty_statement) (algebra_operation (binary_operation (call (ident) (bracket_object)) (natural_number (arabic_natural_number)))) (dot_expression (ident) (ident)) (lambda_literal_expression (ident) (arrow) (ident)) (bracket_object (algebra_operation (functor_binary_operation (natural_number (arabic_natural_number)) (operator_as_expression))) (all_operators_preprocessor)) (unary_operation_prefix (unary_symbol_prefix) (ident)) (unary_operation_postfix (ident) (unary_symbol_postfix)) (return_expression (ident)) (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number)))) (line_comment) (expression_block (spx_expression (spx_self_closing_element (spx_element_name (object_key (ident)))))) (line_comment) (call (dot_expression (ident) (all_operators_preprocessor)) (bracket_object (natural_number (arabic_natural_number)))) (line_comment) (ambiguous_algebra_operation (product_expression (natural_number (arabic_natural_number)) (ident)) (ambiguous_operator) (product_expression (natural_number (arabic_natural_number)) (ident (currency)))) (line_comment) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (object_key (ident)) (assign) (natural_number (arabic_natural_number))) (spx_key_tty_value (object_key (ident)) (assign) (string_literal (escaped_string_literal (string_start) (string_content))))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (object_key (ident)) (assign) (braces_object (spx_expression (spx_self_closing_element (spx_element_name (object_key (ident)))))))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (spread_element (ident)))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (spread_element (ident)) (natural_number (arabic_natural_number)))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (spread_element (ident)) (natural_number (arabic_natural_number)) (assign) (natural_number (arabic_natural_number)))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (spread_element (ident)) (braces_object (natural_number (arabic_natural_number))) (assign) (braces_object (product_expression (natural_number (arabic_natural_number)) (ident))))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident))) (spx_key_tty_value (spread_element (ident)) (braces_object (natural_number (arabic_natural_number))) (assign) (braces_object (product_expression (natural_number (arabic_natural_number)) (ident))))) (statements_block (call (dot_expression (ident) (ident)) (bracket_object (natural_number (arabic_natural_number))))) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (expression_block (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (spx_expression (spx_element (spx_opening_element (spx_element_name (object_key (ident)))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident)))))) (spx_text) (statements_block (natural_number (arabic_natural_number))) (spx_text) (spx_closing_element (spx_element_name (object_key (ident))))))) (empty_statement) (line_comment) (expression_block (object_declaration (ident) (ident) (braces_object (key_tty_value (object_key (ident)) (natural_number (arabic_natural_number))) (key_tty_value (object_key (ident)) (natural_number (arabic_natural_number)) (assign) (natural_number (arabic_natural_number)))))) (line_comment) (expression_block (functor_literal_expression (ident) (ident) (bracket_object) (statements_block (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number))))) (algebra_operation (binary_operation (call (ident) (bracket_object)) (algebra_operation (binary_operation (call (ident) (bracket_object)) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))))) (line_comment) (bracket_object (key_tty_value (object_key (call (ident) (bracket_object))) (natural_number (arabic_natural_number)))) (hash_tag_expression (decorator (ident)) (yield_expression (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))))) (expression_block (functor_literal_expression (ident) (bracket_object) (statements_block))) (empty_statement) (algebra_operation (binary_operation (call (ident) (bracket_object)) (ambiguous_algebra_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))))) (bracket_object (algebra_operation (binary_operation (call (ident) (bracket_object)) (algebra_operation (binary_operation (ident) (natural_number (arabic_natural_number))))))) (bracket_object (algebra_operation (binary_operation (call (ident) (bracket_object)) (natural_number (arabic_natural_number))))) (bracket_object (functor_literal_expression (ident) (bracket_object) (statements_block))) (bracket_object (key_tty_value (object_key (call (dot_expression (ident) (ident)) (bracket_object))) (natural_number (arabic_natural_number)) (assign) (braces_object))) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))
