============================================
UnaryTest operation
============================================
-1;
3-;
3x-;
hghg{};
*jhj()();
x+;
*(3+1);
*xdd.xxa;
xkd.sdasd?;
!kjkj::ghfhf;
+++!!!'self;
(ld, _, sad)+?;
!s;
-1..3;

--------------------
(source_file (ambiguous_algebra_operation (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator)) (ambiguous_algebra_operation (product_expression (natural_number (arabic_natural_number)) (ident)) (ambiguous_operator)) (expression_block (build (ident) (braces_object))) (empty_statement) (ambiguous_algebra_operation (ambiguous_operator) (call (call (ident) (bracket_object)) (bracket_object))) (ambiguous_algebra_operation (ident) (ambiguous_operator)) (ambiguous_algebra_operation (ambiguous_operator) (bracket_object (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ambiguous_algebra_operation (ambiguous_operator) (dot_expression (ident) (ident))) (unary_operation_postfix (dot_expression (ident) (ident)) (unary_symbol_postfix)) (unary_operation_prefix (unary_symbol_prefix) (simple_path (ident) (ident))) (ambiguous_algebra_operation (ambiguous_operator) (ambiguous_algebra_operation (ambiguous_operator) (ambiguous_algebra_operation (ambiguous_operator) (unary_operation_prefix (unary_symbol_prefix) (unary_operation_prefix (unary_symbol_prefix) (unary_operation_prefix (unary_symbol_prefix) (symbol))))))) (unary_operation_postfix (ambiguous_algebra_operation (bracket_object (ident) (ident) (ident)) (ambiguous_operator)) (unary_symbol_postfix)) (unary_operation_prefix (unary_symbol_prefix) (ident)) (ambiguous_algebra_operation (ambiguous_operator) (range_expression (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))))


============================================
UnaryTest operation: Decorator
============================================
#(-1) a;
#(3-) a;
#(3x-) a;
#(*jhj()()) a;
#(x+) a;
#(*(3+1)) a;
#(*xdd.xxa) a;
#xkd a;
#kjkj::ghfhf a;
#('self) a;
#((ld, _, sad)*?) a;
#s a;

---

 (source_file (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_operator) (natural_number (arabic_natural_number))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator)))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (product_expression (natural_number (arabic_natural_number)) (ident)) (ambiguous_operator)))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_operator) (call (call (ident) (bracket_object)) (bracket_object))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ident) (ambiguous_operator)))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_operator) (bracket_object (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_operator) (dot_expression (ident) (ident))))) (ident)) (hash_tag_expression (decorator (ident)) (ident)) (hash_tag_expression (decorator (simple_path (ident) (ident))) (ident)) (hash_tag_expression (decorator (bracket_object (symbol))) (ident)) (hash_tag_expression (decorator (bracket_object (unary_operation_postfix (ambiguous_algebra_operation (bracket_object (ident) (ident) (ident)) (ambiguous_operator)) (unary_symbol_postfix)))) (ident)) (hash_tag_expression (decorator (ident)) (ident)))


============================================
Binary operation
============================================
3.23 + 2;
3'e+50 + i;
3'e+50 - 3i;
3x + 8;
hghg() - 6 - 8 -9 +1 -(-4);
sdsd::sads.`5454` + 38;

---

(source_file (ambiguous_algebra_operation (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_algebra_operation (decimal_literal (natural_fraction_literal (arabic_natural_number) (fractional_unit_suffix (exponent (arabic_natural_number))))) (ambiguous_operator) (ident)) (ambiguous_algebra_operation (decimal_literal (natural_fraction_literal (arabic_natural_number) (fractional_unit_suffix (exponent (arabic_natural_number))))) (ambiguous_operator) (product_expression (natural_number (arabic_natural_number)) (ident))) (ambiguous_algebra_operation (product_expression (natural_number (arabic_natural_number)) (ident)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (call (ident) (bracket_object)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (bracket_object (ambiguous_algebra_operation (ambiguous_operator) (natural_number (arabic_natural_number))))) (ambiguous_algebra_operation (dot_expression (simple_path (ident) (ident)) (string_literal (escaped_string_literal (string_start) (string_content)))) (ambiguous_operator) (natural_number (arabic_natural_number))))



============================================
Binary operation: Decorator
============================================
#(3.23 + 2) kj;
#(3'e+50 + --i) jg;
#(3'e+50 - 3i) jjj;
#(3x + 8) kkk;
#(hghg() - 6 - 8 -9 +1 -(-4)) kk_ljl;
#(sdsd::sads.`5454` + 38) lklk;
#(kkj|kkjkj|jhjhj) lklk;

---

(source_file (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (decimal_literal (natural_fraction_literal (arabic_natural_number) (fractional_unit_suffix (exponent (arabic_natural_number))))) (ambiguous_operator)) (ambiguous_operator)) (ambiguous_operator) (ident)))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (decimal_literal (natural_fraction_literal (arabic_natural_number) (fractional_unit_suffix (exponent (arabic_natural_number))))) (ambiguous_operator) (product_expression (natural_number (arabic_natural_number)) (ident))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (product_expression (natural_number (arabic_natural_number)) (ident)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (call (ident) (bracket_object)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator) (bracket_object (ambiguous_algebra_operation (ambiguous_operator) (natural_number (arabic_natural_number))))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (dot_expression (simple_path (ident) (ident)) (string_literal (escaped_string_literal (string_start) (string_content)))) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ident)) (hash_tag_expression (decorator (bracket_object (algebra_operation (functor_binary_operation (algebra_operation (functor_binary_operation (ident) (ident))) (ident))))) (ident)))


============================================
Ambiguity operations
============================================
3.23* + 2;
-3x- + 8;
!asd + asd;
(sd, _, 30)? | *(1, 1, 1)+ & (2,3,2);
path::aasd? + *(3++5);
3+5+;
---

(source_file (ambiguous_algebra_operation (ambiguous_algebra_operation (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number))) (ambiguous_operator)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_operator) (product_expression (natural_number (arabic_natural_number)) (ident))) (ambiguous_operator)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_algebra_operation (unary_operation_prefix (unary_symbol_prefix) (ident)) (ambiguous_operator) (ident)) (algebra_operation (functor_binary_operation (unary_operation_postfix (bracket_object (ident) (ident) (natural_number (arabic_natural_number))) (unary_symbol_postfix)) (algebra_operation (functor_binary_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_operator) (bracket_object (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (ambiguous_operator)) (bracket_object (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number))))))) (ambiguous_algebra_operation (ambiguous_algebra_operation (unary_operation_postfix (simple_path (ident) (ident)) (unary_symbol_postfix)) (ambiguous_operator)) (ambiguous_operator) (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ambiguous_algebra_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator)))


============================================
Ambiguity operations: Decorators
============================================
#(3.23* + 2) l;
#(-3x- + 8) k;
#(!asd + asd)kjk;
#((sd, _, 30)? | *(1, 1, 1)+ & (2,3,2)) jjh;
#(path::aasd? + *(3++5)) mkk;
#(3+5+) kl;
---
 (source_file (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number))) (ambiguous_operator)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_operator) (product_expression (natural_number (arabic_natural_number)) (ident))) (ambiguous_operator)) (ambiguous_operator) (natural_number (arabic_natural_number))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (unary_operation_prefix (unary_symbol_prefix) (ident)) (ambiguous_operator) (ident)))) (ident)) (hash_tag_expression (decorator (bracket_object (algebra_operation (functor_binary_operation (unary_operation_postfix (bracket_object (ident) (ident) (natural_number (arabic_natural_number))) (unary_symbol_postfix)) (algebra_operation (functor_binary_operation (ambiguous_algebra_operation (ambiguous_algebra_operation (ambiguous_operator) (bracket_object (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)))) (ambiguous_operator)) (bracket_object (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number)) (natural_number (arabic_natural_number))))))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (unary_operation_postfix (simple_path (ident) (ident)) (unary_symbol_postfix)) (ambiguous_operator)) (ambiguous_operator) (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator)) (ambiguous_operator) (natural_number (arabic_natural_number))))))) (ident)) (hash_tag_expression (decorator (bracket_object (ambiguous_algebra_operation (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (natural_number (arabic_natural_number))) (ambiguous_operator)))) (ident)))

====================================================
Pipe  operation
====================================================
3 |> wsd;
(877 + 68meter) |> saadss |> 12.26;
---

(source_file (algebra_operation (binary_operation (natural_number (arabic_natural_number)) (ident))) (algebra_operation (binary_operation (algebra_operation (binary_operation (bracket_object (ambiguous_algebra_operation (natural_number (arabic_natural_number)) (ambiguous_operator) (product_expression (natural_number (arabic_natural_number)) (ident)))) (ident))) (decimal_literal (fraction_literal (arabic_natural_number) (arabic_natural_number))))))

====================================================
morphism operation
====================================================
x -> askjdk;

---

(source_file (algebra_operation (binary_operation (ident) (ident))))

====================================================
In operation
====================================================
y in z;
---

(source_file (algebra_operation (binary_operation (ident) (ident))))
====================================================
NOT_IN operation
====================================================
y not in z;
---

(source_file (algebra_operation (binary_operation (ident) (ident))))

====================================================
IS  operation
====================================================
y is z{let name:number};

---
(source_file (algebra_operation (binary_operation (ident) (build (ident) (braces_object (key_tty_value (binding) (object_key (ident)) (ident)))))))
====================================================
IS_NOT operation
====================================================
y is not z;

---
(source_file (algebra_operation (binary_operation (ident) (ident))))


====================================================
AND operation
====================================================
y and z;

---
(source_file (algebra_operation (functor_binary_operation (ident) (ident))))

====================================================
OR operation
====================================================
y or z;

---

(source_file (algebra_operation (functor_binary_operation (ident) (ident))))

====================================================
ON operation
====================================================
y on z;

---

(source_file (algebra_operation (binary_operation (ident) (ident))))

====================================================
BECOMES operation
====================================================
y becomes z;

---

(source_file (algebra_operation (binary_operation (ident) (ident))))
====================================================
ON BECOMES operation
====================================================

x on Change(_:color, _: color(`green`)) becomes Circle;

---
(source_file (algebra_operation (binary_operation (algebra_operation (binary_operation (ident) (call (ident) (bracket_object (key_tty_value (object_key (ident)) (ident)) (key_tty_value (object_key (ident)) (call (ident) (bracket_object (string_literal (escaped_string_literal (string_start) (string_content)))))))))) (ident))))


====================================================
compact range
====================================================
4 < s > 4;

---

(source_file (algebra_operation (binary_operation (algebra_operation (binary_operation (natural_number (arabic_natural_number)) (ident))) (natural_number (arabic_natural_number)))))

====================================================
binary with preprocessor
====================================================
as ==.[_ -> Number, _ - {}] WD;
as +.[_ -> Number, _ - {}] WD;
---

(source_file (algebra_operation (binary_operation (ident) (square_object (algebra_operation (binary_operation (ident) (ident))) (ambiguous_algebra_operation (ident) (ambiguous_operator) (braces_object))) (ident))) (ambiguous_algebra_operation (ident) (ambiguous_operator) (square_object (algebra_operation (binary_operation (ident) (ident))) (ambiguous_algebra_operation (ident) (ambiguous_operator) (braces_object))) (ident)))

====================================================
binary dot expression
====================================================
aasda.asdasd.+(5);
aasda.asdasd.+.[_ -> Number, _ - {}](5);
aasda.asdasd.(-> | is);
---
(source_file (call (dot_expression (dot_expression (ident) (ident)) (all_operators_preprocessor)) (bracket_object (natural_number (arabic_natural_number)))) (call (dot_expression (dot_expression (ident) (ident)) (all_operators_preprocessor (square_object (algebra_operation (binary_operation (ident) (ident))) (ambiguous_algebra_operation (ident) (ambiguous_operator) (braces_object))))) (bracket_object (natural_number (arabic_natural_number)))) (dot_expression (dot_expression (ident) (ident)) (bracket_object (algebra_operation (functor_binary_operation (operator_as_expression) (operator_as_expression))))))
