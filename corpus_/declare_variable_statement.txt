==============================================
Valid bind statement
==============================================
const Some(_, x:sads) = 25;
const #hghg Some(_, x:sads) = 25;
const #555 #adsdd Some(_, x:sads) = 25;
const #`555` #adsdd Some(_, x:sads) = 25;
const #sad::sad #adsdd Some(_, x:sads) = 25;
const #(!asds | sad) #adsdd Some(_, x:sads) = 25;
let x = 5;
let x:1+6 = y;
let w: #asdas #asd awd  = y;
let (_, x:sads) = 25;
let ABC{_, x:sads} = 25;
const [y, y, ...d] = 25;

---

(source_file
    (variable_declaration (object_pattern (ident) (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (object_pattern (decorator (ident)) (ident) (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (object_pattern (decorator (natural_number (arabic_natural_number))) (decorator (ident)) (ident) (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (object_pattern (decorator (string_literal)) (decorator (ident)) (ident) (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (object_pattern (decorator (simple_path (ident) (ident))) (decorator (ident)) (ident) (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (object_pattern (decorator (bracket_object (algebra_operation (binary_operation (algebra_operation (unary_operation_prefix (symbolic_operator_without_comparison (ambiguous_unary_binary_operator)) (ident))) (symbolic_operator (ambiguous_unary_binary_operator)) (ident))))) (decorator (ident)) (ident) (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (exportable_type_annotation (ident)) (natural_number (arabic_natural_number)))
    (variable_declaration (exportable_type_annotation (ident) (algebra_operation (binary_operation (natural_number (arabic_natural_number)) (symbolic_operator (ambiguous_unary_binary_operator)) (natural_number (arabic_natural_number))))) (ident))
    (variable_declaration (exportable_type_annotation (ident) (hash_tag_expression (decorator (ident)) (hash_tag_expression (decorator (ident)) (ident)))) (ident))
    (variable_declaration (object_pattern (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (object_pattern (ident) (braces_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number)))
    (variable_declaration (square_object (ident) (ident) (spread_element (ident))) (natural_number (arabic_natural_number)))
)



==============================================
Invalid bind statement: not ::self binding
==============================================

let ::self = 4;
---

(source_file (ERROR (simple_path (ident (MISSING "ident_token1")) (ident))) (natural_number (arabic_natural_number)))

==============================================
Invalid bind statement: not symbol binding
==============================================
const 'obs = 5;

---

(source_file (ERROR) (assignment_statement (symbol) (natural_number (arabic_natural_number))))

==============================================
Invalid bind statement: not path binding
==============================================
let x::dad = 25;

---
(source_file (ERROR (simple_path (ident) (ident))) (natural_number (arabic_natural_number)))

========================================================
Invalid bind statement: not export on complex patterns 1
========================================================
let [::]Some(_, x:sads) = 25;

---

(source_file (variable_declaration (ERROR (exportable_type_annotation (export_sign) (ident))) (object_pattern (bracket_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number))))

========================================================
Invalid bind statement: not export on complex patterns 2
========================================================
let [::]ABC{_, x:sads} = 25;
---

(source_file (variable_declaration (ERROR (exportable_type_annotation (export_sign) (ident))) (object_pattern (braces_object (key_tty_value (object_key (ident))) (key_tty_value (object_key (ident)) (ident)))) (natural_number (arabic_natural_number))))

============================================================
Invalid bind statement: not call pattern on square objects
=============================================================

const lkl[y, y, ...d] = 25;

---

(source_file
    (variable_declaration (ERROR (ident)) (square_object (ident) (ident) (spread_element (ident))) (natural_number (arabic_natural_number)))
)

=============================================================
Invalid bind statement: not decorators on simple pattern 1
=============================================================

const  #sd a = 25;

---
(source_file (ERROR (decorator (ident)) (ident)) (natural_number (arabic_natural_number)))

=============================================================
Invalid bind statement: not decorators on simple pattern 2
=============================================================

const  #sd #asa {x, y} = 25;

---
 (source_file (ERROR (decorator (ident)) (decorator (build (ident) (braces_object (key_tty_value (object_key (ident))) (ident)))) (arabic_natural_number)) (empty_statement))

==============================================
Exportable bind variable
==============================================

let [::]x = 6;
const [::]asdasd:45 = 25;

---

(source_file
    (variable_declaration (exportable_type_annotation (export_sign) (ident)) (natural_number (arabic_natural_number)))
    (variable_declaration (exportable_type_annotation (export_sign) (ident) (natural_number (arabic_natural_number))) (natural_number (arabic_natural_number)))
)
