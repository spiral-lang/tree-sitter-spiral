===============================================
IF statement/expression
===============================================

if y is Person{let age, let name}{
    console.log(age, name)

}

if x == 5 { console.log(`is 5`) } else {console.log(`not five`)};
if y is Person(let age, let name){
    console.log(age, name)

}else if y is Car(let color, owner: {let name, let age}){
        console.log(age, name)
}

label [:] if a{
}else{
}

#asdas #sads if as{} else if b{} else if c{} else if d==2 else{}

let y = if y is Person{let age, let name}{
            console.log(age, name)

}

---



===============================================
While statement/expression
===============================================

while #color(`red`) Box{x} {
    console.log(`hi`)

}

let x = while true {
        return 2;
};

let w = (3+5) + (while y is B{let j} { 5 });

let x = while true {
        2
}

---


===============================================
Loop statement/expression
===============================================

loop {
    console.log(`hi`)
}

let x = loop {
        return 2;
};

let w = (3+5) + (loop{ 5 });

let x = loop {
        2
}

---


===============================================
declare functor statement
===============================================

fn graph(){
    return graph()
}

#asds #dasd #sasd fn graph(){
    return graph()
}

fn [::]box(){
    return graph()
}

---





===============================================
Theory
===============================================

theory asds {
    console.log(`hola`)
}

#open #experimental theory asds {
    console.log(`hola`);
}

theory [::]asds {
    console.log(`hola`)
}

---





===============================================
Module
===============================================

mod asds {
    console.log(`hola`)
}

#open #experimental mod [::]asds {
    console.log(`hola`);
}

---



===============================================
For expression/statement
===============================================

for _:(key: ident, ',' , value: ident|number)* of `name, eric, age, 30` {
    console.log(`key: {key}, value: {value}`)
}

let x = for y of z {y};
let x = for y of z {
    y
}

---




===============================================
Match expression/statement
===============================================

match x {
 _:adasd=>x,
 (x: w, y:q)=>x,
 fn asas(x:35){
 }
}

let x = match x {
 _:adasd=>x,
 (x: w, y:q)=>x,
 fn asas(x:35){
 }
}

let x = (match dfgdfgdf {});
---



===============================================
Try expression/statement
===============================================
try x {
 _:adasd=>x,
 (x: w, y:q)=>x,
 fn asas(x:35){
 }
}

let x = try x {
         _:adasd=>x,
         (x: w, y:q)=>x,
         fn asas(x:35){
         }
  }

let x = (try x {
       _:adasd=>x,
       (x: w, y:q)=>x,
       fn asas(x:35){
       }
});

try {
asdasd;
sadasd();
} catch {
 _:adasd=>x,
 (x: w, y:q)=>x,
 fn asas(x:35){
 }
}

let x = try {
        asdasd;
        sadasd();
        } catch {
         _:adasd=>x,
         (x: w, y:q)=>x,
         fn asas(x:35){
         }
        }

let x = (try {
        asdasd;
        sadasd();
        } catch {
         _:adasd=>x,
         (x: w, y:q)=>x,
         fn asas(x:35){
         }
        });

//try function
let x = try(as()) ;

if try(w) is ok {
} else{

}

match try(asd){
    _:OK=> (),
    _:Error=> sd(),
}


---


===============================================
Continue
===============================================

s = (continue);
continue sad;
continue;

---


===============================================
Break
===============================================

s = (break);
break 'sad;
break;

---


===============================================
Return
===============================================

s = (return);
return 2+1;
return;

---



===============================================
Throw
===============================================

s = (throw asdasd);
throw 2+1;
throw Ersd;

---



===============================================
Show
===============================================

s = (show asdasd);
show 2+1;
show Ersd;

---
(source_file
    (assignment_statement (ident) (bracket_object (show_expression (ident))))
    (show_expression (algebra_operation (binary_operation (natural_number (arabic_natural_number)) (symbolic_operator (ambiguous_unary_binary_operator)) (natural_number (arabic_natural_number)))))
    (show_expression (ident))
)

===============================================
Yield
===============================================

s = (yield asdasd);
yield 2+1;
yield Ersd;
#delegated yield ssfaf  + 5;

---




===============================================
Object declaration
===============================================

#dsd wrwr sf {
    `sdad`: `asdas`,
}
enum Temperature{
  Cold,
  Heat
};

let x = enum {
  Cold,
  Heat
}


---


===============================================
Statement assigment
===============================================

let x =  {
  if a {
     baj();
  }
  j
}

---



===============================================
Naked Object assigment
===============================================

let x =  {
    {
        `id`: 0,
        `name`: `Tonia Brennan`
    },
    {
        `id`: 1,
        `name`: `Jennifer Gibson`
    },
    {
        `id`: 2,
        `name`: `Berger Gonzales`
    }
}

---




===============================================
Use declaration
===============================================

use sad::asd::{foo, bar};
#ambient use asd as pld;
#ambient use asd::asd as pld;
#ambient use asd::{jfkflf::{
    dasdsa,
    adasdas,
    },
    kdksdk,
    sksajdks::{
    dsdsad::{sdsad as _}
    }
};

use theory(asdsdasd)::sadas;
use file(`/usr/root/key`)::sadas;
use file(`/usr/root/key`)::{zxc, zxc};

---



===============================================
on declaration
===============================================

x on {
 _:Click=> 1,
 _:Click=> 1,
 _:Click=> 1,
 _:Click=> 1,

}

let y = x on {
1,
2,
3,

}

---



===============================================
do expression statement
===============================================

do 5;
do {
1;
2;

}
let y = do {
1;
2;
3;


}
---

